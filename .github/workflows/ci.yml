name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run tests
      run: go test -v ./...

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not properly formatted:"
          gofmt -s -l .
          exit 1
        fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test]

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Build for all platforms
      run: |
        # Set version for build (use VERSION file or fallback to commit SHA)
        if [ -f "VERSION" ]; then
          VERSION=$(cat VERSION)
        else
          VERSION=${GITHUB_SHA:0:7}
        fi

        echo "Building version: $VERSION"

        # Create build directory
        mkdir -p build

        # Build for each platform
        GOOS=linux GOARCH=amd64 go build -ldflags "-X main.Version=$VERSION -s -w" -o build/gsecutil-linux-amd64 .
        GOOS=linux GOARCH=arm64 go build -ldflags "-X main.Version=$VERSION -s -w" -o build/gsecutil-linux-arm64 .
        GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.Version=$VERSION -s -w" -o build/gsecutil-darwin-amd64 .
        GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.Version=$VERSION -s -w" -o build/gsecutil-darwin-arm64 .
        GOOS=windows GOARCH=amd64 go build -ldflags "-X main.Version=$VERSION -s -w" -o build/gsecutil-windows-amd64.exe .

        # Show built files
        ls -la build/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ github.sha }}
        path: build/
        retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Run Gosec Security Scanner
      run: |
        # Ensure Go bin directory is in PATH
        export PATH=$PATH:$(go env GOPATH)/bin

        # Install gosec (correct repository path)
        echo "Installing gosec from github.com/securego/gosec..."
        if go install github.com/securego/gosec/v2/cmd/gosec@latest; then
          echo "✓ gosec installed successfully"

          # Run gosec security scan
          echo "Running gosec security scan..."
          if gosec -fmt json -out gosec-results.json ./...; then
            echo "✓ Security scan completed successfully"
          else
            echo "⚠ Security scan found issues (non-critical for CI)"
          fi

          # Show results if file exists
          if [ -f gosec-results.json ]; then
            echo "Security scan results:"
            ISSUE_COUNT=$(cat gosec-results.json | jq '.Issues | length' 2>/dev/null || echo "unknown")
            echo "Issues found: $ISSUE_COUNT"

            # Show first few issues for preview
            if [ "$ISSUE_COUNT" != "0" ] && [ "$ISSUE_COUNT" != "unknown" ]; then
              echo "Sample issues:"
              cat gosec-results.json | jq '.Issues[:3] | .[] | {severity, confidence, what, file, line}' 2>/dev/null || echo "Could not parse issues"
            fi
          fi
        else
          echo "⚠ Failed to install gosec, skipping security scan"
          echo "This is non-critical for CI success"
        fi

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Run Go vulnerability check
      run: |
        # Ensure Go bin directory is in PATH
        export PATH=$PATH:$(go env GOPATH)/bin

        # Install govulncheck
        go install golang.org/x/vuln/cmd/govulncheck@latest

        # Run vulnerability scan
        govulncheck ./...

    - name: Run Nancy (dependency vulnerability scanner)
      run: |
        # Alternative dependency check using Nancy
        go list -json -deps ./... | docker run --rm -i sonatypecommunity/nancy:latest sleuth || echo "Nancy scan completed with warnings (non-critical)"
