name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v1.2.3, etc.

permissions:
  contents: write
  packages: write
  issues: read
  pull-requests: read

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog generation
      
    - name: Get version from tag and validate with VERSION file
      id: get_version
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        
        # Check if VERSION file exists and matches tag
        if [ -f "VERSION" ]; then
          FILE_VERSION=$(cat VERSION)
          if [ "$TAG_VERSION" != "$FILE_VERSION" ]; then
            echo "Warning: Tag version ($TAG_VERSION) differs from VERSION file ($FILE_VERSION)"
            echo "Using tag version: $TAG_VERSION"
          fi
        fi
        
        echo "version=$TAG_VERSION" >> $GITHUB_OUTPUT
        echo "Version: $TAG_VERSION"
        
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -z "$PREV_TAG" ]; then
          # If no previous tag, get recent commits (limit to avoid too much output)
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse -10)
        else
          # Get commits since the previous tag
          CHANGELOG=$(git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)" --reverse)
        fi
        
        # Write changelog to file to avoid GitHub Actions output format issues
        echo "$CHANGELOG" > changelog.txt
        
        # Set a simple flag that changelog exists
        echo "changelog_ready=true" >> $GITHUB_OUTPUT
        
    - name: Create Release
      id: create_release
      run: |
        # Create release body with changelog from file
        {
          echo "## Changes in this Release"
          echo ""
          if [ -f "changelog.txt" ]; then
            cat changelog.txt
          else
            echo "- Release created from tag ${{ steps.get_version.outputs.version }}"
          fi
          echo ""
          echo "## Installation"
          echo ""
          echo "### Download Pre-built Binaries"
          echo ""
          echo "Choose the appropriate binary for your platform:"
          echo ""
          echo "| Platform | Architecture | Download |"
          echo "|----------|--------------|----------|"
          echo "| Linux | x64 | [gsecutil-linux-amd64](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.version }}/gsecutil-linux-amd64) |"
          echo "| Linux | ARM64 | [gsecutil-linux-arm64](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.version }}/gsecutil-linux-arm64) |"
          echo "| macOS | Intel | [gsecutil-darwin-amd64](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.version }}/gsecutil-darwin-amd64) |"
          echo "| macOS | Apple Silicon | [gsecutil-darwin-arm64](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.version }}/gsecutil-darwin-arm64) |"
          echo "| Windows | x64 | [gsecutil-windows-amd64.exe](https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.version }}/gsecutil-windows-amd64.exe) |"
          echo ""
          echo "### Install with Go"
          echo ""
          echo "\`\`\`bash"
          echo "go install github.com/${{ github.repository }}@v${{ steps.get_version.outputs.version }}"
          echo "\`\`\`"
          echo ""
          echo "### Verify Installation"
          echo ""
          echo "\`\`\`bash"
          echo "./gsecutil-linux-amd64 --version  # Linux example"
          echo "gsecutil --version                # If installed with Go"
          echo "\`\`\`"
          echo ""
          echo "## Requirements"
          echo ""
          echo "- Google Cloud SDK (\`gcloud\`) installed and authenticated"
          echo "- Secret Manager API enabled in your Google Cloud project"
          echo "- Appropriate IAM permissions for Secret Manager operations"
          echo ""
          echo "## Documentation"
          echo ""
          echo "- [README.md](https://github.com/${{ github.repository }}/blob/v${{ steps.get_version.outputs.version }}/README.md) - Usage and examples"
          echo "- [BUILD.md](https://github.com/${{ github.repository }}/blob/v${{ steps.get_version.outputs.version }}/BUILD.md) - Build from source instructions"
        } > release_body.md
        
        # Show the release body for debugging
        echo "=== Release Body ==="
        cat release_body.md
        echo "=== End Release Body ==="
        
        # Create release using GitHub CLI
        PRE_RELEASE_FLAG=""
        if [[ "${{ github.ref }}" == *"alpha"* || "${{ github.ref }}" == *"beta"* || "${{ github.ref }}" == *"rc"* ]]; then
          PRE_RELEASE_FLAG="--prerelease"
        fi
        
        gh release create "${{ github.ref_name }}" \
          --title "Release ${{ steps.get_version.outputs.version }}" \
          --notes-file release_body.md \
          --repo ${{ github.repository }} \
          $PRE_RELEASE_FLAG
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-upload:
    name: Build and Upload Assets
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            asset_name: gsecutil-linux-amd64
          - goos: linux
            goarch: arm64
            asset_name: gsecutil-linux-arm64
          - goos: darwin
            goarch: amd64
            asset_name: gsecutil-darwin-amd64
          - goos: darwin
            goarch: arm64
            asset_name: gsecutil-darwin-arm64
          - goos: windows
            goarch: amd64
            asset_name: gsecutil-windows-amd64.exe
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      run: go mod download
      
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        VERSION=${{ needs.create-release.outputs.version }}
        go build -ldflags "-X main.Version=$VERSION -s -w" -o ${{ matrix.asset_name }} .
        
        # Make executable (important for Unix-like systems)
        chmod +x ${{ matrix.asset_name }}
        
        # Show file info
        ls -la ${{ matrix.asset_name }}
        file ${{ matrix.asset_name }} || true
        
    - name: Generate checksums
      run: |
        # Generate SHA256 checksum
        sha256sum ${{ matrix.asset_name }} > ${{ matrix.asset_name }}.sha256
        
        # Show checksum
        cat ${{ matrix.asset_name }}.sha256
        
    - name: Upload Release Assets
      run: |
        # Upload binary and checksum using GitHub CLI
        gh release upload "v${{ needs.create-release.outputs.version }}" \
          "${{ matrix.asset_name }}" \
          "${{ matrix.asset_name }}.sha256" \
          --repo ${{ github.repository }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-checksums:
    name: Create Combined Checksums
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload]
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Create and upload combined checksums
      run: |
        VERSION=${{ needs.create-release.outputs.version }}
        
        # Create checksums file header
        cat > checksums.txt << EOF
        # SHA256 Checksums for gsecutil v$VERSION
        # Generated on $(date -u)
        
        # Download individual checksums (they're already uploaded as separate files)
        # Combined here for convenience
        
        ## Verification
        
        To verify the integrity of downloaded binaries:
        
        \`\`\`bash
        # Download the binary and checksum file
        curl -LO https://github.com/${{ github.repository }}/releases/download/v$VERSION/gsecutil-linux-amd64
        curl -LO https://github.com/${{ github.repository }}/releases/download/v$VERSION/gsecutil-linux-amd64.sha256
        
        # Verify checksum
        sha256sum -c gsecutil-linux-amd64.sha256
        \`\`\`
        
        Note: Individual .sha256 files are available for each binary in this release.
        EOF
        
        # Upload the combined checksums file with explicit repository
        gh release upload "v$VERSION" checksums.txt --repo ${{ github.repository }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload, create-checksums]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.build-and-upload.result == 'success' && needs.create-checksums.result == 'success'
      run: |
        echo "✅ Release v${{ needs.create-release.outputs.version }} created successfully!"
        echo "🔗 View release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.create-release.outputs.version }}"
        
    - name: Notify Failure
      if: needs.build-and-upload.result == 'failure' || needs.create-checksums.result == 'failure'
      run: |
        echo "❌ Release creation failed!"
        exit 1
